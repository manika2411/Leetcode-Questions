// https://leetcode.com/problems/course-schedule/submissions/1712349547/
// 207. Course Schedule
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites)
    {
        vector<vector<int>> graph(numCourses);
        vector<int> indegree(numCourses, 0);

        for (auto& pair : prerequisites) 
        {
            graph[pair[1]].push_back(pair[0]);
            indegree[pair[0]]++;
        }

        queue<int> q;

        for (int i = 0; i < numCourses; i++) 
        {
            if (indegree[i] == 0) 
            {
                q.push(i);
            }
        }

        int count = 0;

        while (!q.empty()) 
        {
            int course = q.front();
            q.pop();
            count++;

            for (int neighbor : graph[course]) 
            {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) 
                {
                    q.push(neighbor);
                }
            }
        }

        return count == numCourses;
    }
};
