//https://leetcode.com/problems/maximum-subarray/description/
//53- Maximum Subarray
class Solution {
public:
    int findMaxCrossingSubarray(vector<int>& nums, int low, int mid, int high) {
        int leftSum = INT_MIN;
        int sum = 0;
        for (int i = mid; i >= low; i--) {
            sum += nums[i];
            if (sum > leftSum)
                leftSum = sum;
        }

        int rightSum = INT_MIN;
        sum = 0;
        for (int i = mid + 1; i <= high; i++) {
            sum += nums[i];
            if (sum > rightSum)
                rightSum = sum;
        }

        return leftSum + rightSum;
    }

    int divideAndConquer(vector<int>& nums, int low, int high) {
        if (low == high)
            return nums[low];

        int mid = (low + high) / 2;

        int leftMax = divideAndConquer(nums, low, mid);
        int rightMax = divideAndConquer(nums, mid + 1, high);
        int crossMax = findMaxCrossingSubarray(nums, low, mid, high);

        return max(max(leftMax, rightMax), crossMax);
    }

    int maxSubArray(vector<int>& nums) {
        return divideAndConquer(nums, 0, nums.size() - 1);
    }
};
